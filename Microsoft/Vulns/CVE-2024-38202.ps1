# CVE-2024-38202 Mitigation Script for Windows Server 2019 and 2022
# Author: ChatGPT
# Description: Mitigate Elevation of Privilege Vulnerability in Windows Update

# Enable Auditing for Object Access
Write-Output "Enabling Object Access Auditing..."
# This turns on tracking to monitor who accesses important files
auditpol /set /subcategory:"File System" /success:enable /failure:enable

# Apply Audit Policy to Monitor Sensitive Privilege Use
Write-Output "Applying audit policy for sensitive privilege use..."
# Sets up monitoring to watch if anyone uses powerful system tools
if (Get-Command auditpol -ErrorAction SilentlyContinue) {
    auditpol /set /subcategory:"Sensitive Privilege Use" /success:enable /failure:enable
} else {
    Write-Output "auditpol command not found. Skipping audit policy configuration."
}

# Set Access Control Lists (ACLs) to Restrict Update and Restore Operations
Write-Output "Restricting access to Update and Restore operations..."
# Dynamically identify the location of UpdateFiles
$updatePath = "C:\Windows\System32\UpdateFiles"
if (-not (Test-Path $updatePath)) {
    Write-Output "UpdateFiles path not found. Creating default directory..."
    New-Item -ItemType Directory -Path $updatePath -Force | Out-Null
}

$acl = Get-Acl $updatePath
$deny = New-Object System.Security.AccessControl.FileSystemAccessRule("Users","Modify","Deny")
$acl.AddAccessRule($deny)
Set-Acl -Path $updatePath -AclObject $acl

# Check if WinRE Update is Required
Write-Output "Checking WinRE update status..."
# Checks if the special recovery environment is updated
$winreStatus = (dism /Online /Get-Packages | Select-String "Safe OS Dynamic Update").Line
if ($winreStatus -notmatch "KB5046399|KB5046400") {
    # Apply the update using a local CAB file
    Write-Output "Applying WinRE update using local CAB file..."
    $cabPath = "C:\Users\username\Downloads\kb5046339.cab"
    if (Test-Path $cabPath) {
        Write-Output "CAB file found. Proceeding with update..."
        dism /Online /Add-Package /PackagePath:$cabPath /Quiet
    } else {
        Write-Output "Error: CAB file not found at $cabPath. Aborting update."
        exit 1
    }
} else {
    Write-Output "WinRE is already up to date."
}

# Restart the Server if Required
if (Test-PendingReboot) {
    Write-Output "A restart is required. Rebooting now..."
    Restart-Computer -Force
} else {
    Write-Output "No restart required. Mitigation complete."
}

# Function to Check Pending Reboot Status
Function Test-PendingReboot {
    $rebootRequired = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired' -ErrorAction SilentlyContinue)
    return $null -ne $rebootRequired
}

# Simplified WinRE Version Check and Cleanup with Confirmation Stages
Write-Output "Checking WinRE version..."
$WinREPath = (reagentc /info | Select-String "Windows RE location").ToString().Split(':')[-1].Trim()
$TempDir = "$env:SystemDrive\mnt"

if (!(Test-Path $TempDir)) {
    New-Item -ItemType Directory -Path $TempDir -Force | Out-Null
}

Write-Output "Mounting WinRE image..."
dism /Mount-Image /ImageFile:"$WinREPath\winre.wim" /Index:1 /MountDir:"$TempDir" /Quiet
Write-Output "WinRE image mounted successfully."

$WinREVersion = (Get-Item "$TempDir\Windows\System32\winpeshl.exe").VersionInfo.FileVersionRaw.Revision
Write-Host "WinRE Version: $WinREVersion" -ForegroundColor Cyan

Write-Output "Unmounting WinRE image..."
dism /Unmount-Image /MountDir:"$TempDir" /Discard /Quiet
Write-Output "WinRE image unmounted and cleanup complete."

Remove-Item -Path $TempDir -Force -Recurse
